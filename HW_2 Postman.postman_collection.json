{
	"info": {
		"_postman_id": "b464d9ef-0853-4832-bd3d-53f84d5389cd",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21290112"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/first",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200//\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"//3. Спарсить response body в json.\r",
							"//парсить - это передача данных отправленных на сервер в нашу локальную переменную из глобальной области постмана.\r",
							"//let req_f = request.data\r",
							"let resp_f = pm.response.json()\r",
							"console.log(resp_f)\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let req_name = req_f.name\r",
							"var resp_name = resp_f.name\r",
							"console.log(\"req_name = \" + req_name)\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"pm.test(\"check_name_req\", function () {\r",
							"    pm.expect(req_name).to.eql(\"Robert\");\r",
							"})\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let req_age = + req_f.age\r",
							"var resp_age = + resp_f.age\r",
							"console.log(\"req_age = \" + req_age)\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"pm.test(\"check_age_req\", function () {\r",
							"    pm.expect(req_age).to.eql(40);\r",
							"})\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let req_salary = + req_f.salary\r",
							"var resp_salary = + resp_f.salary\r",
							"console.log(\"req_salary = \" + req_salary)\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"pm.test(\"check_salary_req\", function () {\r",
							"    pm.expect(req_salary).to.eql(3000);\r",
							"})\r",
							"\r",
							"//7. Спарсить request.\r",
							"console.log(req_f)\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"console.log(\"req_name = \" + req_name)\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(req_f.name).to.eql(resp_name);\r",
							"})\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"console.log(\"req_age = \" + req_age)\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"console.log(\"req_salary = \" + req_salary)\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"pm.test(\"check_salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"})\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let resp_u_salary_1_5_year = + resp_f.family.u_salary_1_5_year\r",
							"console.log(\"req_salary = \" + req_salary)\r",
							"console.log(\"resp_u_salary_1_5_year = \" + resp_u_salary_1_5_year)\r",
							"pm.test(\"check_u_salary_1_5_year\", function (){\r",
							"    pm.expect(req_salary*4).to.eql(12000);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_3",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json. УТОЧНИТЬ!!!\r",
							"let resp_f = pm.response.json();\r",
							"console.log(resp_f)\r",
							"\r",
							"//4. Спарсить request. УТОЧНИТЬ!!!\r",
							"let req_f = request.data\r",
							"console.log(req_f)\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.) УТОЧНИТЬ!!!\r",
							"let req_name = req_f.name\r",
							"var resp_name = resp_f.name\r",
							"console.log(\"req_name = \" + req_name)\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"pm.test(\"check_name_req\", function () {\r",
							"    pm.expect(resp_name).to.eql('Robert');\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = +req_f.age\r",
							"var resp_age = +resp_f.age\r",
							"console.log(\"req_age = \" +req_age)\r",
							"console.log(\"resp_age = \" +resp_age)\r",
							"pm.test(\"check_age_req\", function () {\r",
							"    pm.expect(resp_age).to.eql(40);\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req_f.salary\r",
							"var resp_salary = +resp_f.salary\r",
							"console.log(\"req_salary = \" +req_salary)\r",
							"console.log(\"resp_salary = \" +resp_salary)\r",
							"pm.test(\"check_salary_req\", function () {\r",
							"    pm.expect(resp_salary).to.eql(3000);\r",
							"})\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_properties_name\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_properties_age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_name\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"console.log(resp_f)\r",
							"//4. Спарсить request.\r",
							"let req_f = pm.request.url.query.toObject()\r",
							"console.log(req_f)\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.name\r",
							"let resp_name = resp_f.name\r",
							"console.log(\"req_name = \" + req_name)\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(resp_name).to.be.eql(req_name);\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"let req_age = +req_f.age\r",
							"let resp_age = +resp_f.age\r",
							"console.log(\"req_age = \" + req_age)\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(resp_age).to.be.eql(req_age);\r",
							"})\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = +req_f.salary\r",
							"console.log(\"req_salary = \" + req_salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = resp_f.salary\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let resp_salary_0 = + resp_f.salary[0]\r",
							"console.log(\"resp-salary_0 = \" + resp_salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let resp_salary_1 = + resp_f.salary[1]\r",
							"console.log(\"resp_salary_1 = \" + resp_salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let resp_salary_2 = + resp_f.salary[2]\r",
							"console.log(\"resp_salary_2 = \" + resp_salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check_salary_0\", function () {\r",
							"    pm.expect(resp_salary[0]).to.be.eql(req_salary);\r",
							"})\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request(salary забрать из request.)\r",
							"pm.test(\"check_salary_1\", function () {\r",
							"    pm.expect(resp_salary_1).to.be.eql(req_salary*2);\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check_salary_2\", function () {\r",
							"    pm.expect(resp_salary_2).to.be.eql(req_salary*3);\r",
							"})\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//Созданые через вкладку Environments\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"let jsonData = pm.response.json();\r",
							"name = jsonData.name\r",
							"console.log(name)\r",
							"pm.environment.set(\"name\", name)\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"age = jsonData.age\r",
							"console.log(age)\r",
							"pm.environment.set(\"age\", age)\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"salary = jsonData.salary\r",
							"console.log(salary)\r",
							"pm.environment.set(\"salary\", salary[0])\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i < 3; i++) {\r",
							"    console.log(\"salary = \" + resp_salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Robert",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "40",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"console.log(resp_f)\r",
							"//pm.response - возвращает ответ сервера в виде JSON-объекта\r",
							"//7. Спарсить request.\r",
							"let req_f = request.data\r",
							"console.log(req_f)\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"have_property_start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"}), \r",
							"pm.expect\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"have_property_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"have_property_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"have_property_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"have_property_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"have_property_person\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"})\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +req_f.salary\r",
							"let resp_start_qa_salary = +resp_f.start_qa_salary\r",
							"pm.test(\"start_qa_salary_eql_salary\", function () {\r",
							"    pm.expect(resp_start_qa_salary).to.be.eql(req_salary);\r",
							"})\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let resp_qa_salary_6 = +resp_f.qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months_eql_salary*2\", function () {\r",
							"    pm.expect(resp_qa_salary_6).to.be.eql(req_salary*2);\r",
							"})\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let resp_qa_salary_12 = + resp_f.qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months_eql_salary*2.7\", function () {\r",
							"    pm.expect(resp_qa_salary_12).to.be.eql(req_salary*2.7);\r",
							"\r",
							"})\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year_eql_salary*3.3\", function () {\r",
							"    pm.expect(resp_f[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"})\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years_eql_salary*3.8\", function () {\r",
							"    pm.expect(resp_f[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"})\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let resp_u_name = + resp_f.person.u_name[1]\r",
							"console.log(resp_u_name)\r",
							"pm.test(\"u_name_1_eql_salary\", function () {\r",
							"    pm.expect(resp_u_name).to.eql(req_salary);\r",
							"})\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let resp_age = + resp_f.person.u_name[2]\r",
							"let req_age = + req_f.age\r",
							"console.log (\"resp_age = \" + resp_age)\r",
							"console.log(\"req_age = \" + req_age)\r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"})\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let resp_salary_5 = + resp_f.person.u_salary_5_years\r",
							"pm.test(\"check_u_salary_5_years\", function () {\r",
							"    pm.expect(resp_salary_5).to.eql(req_salary*4.2);\r",
							"})\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let person_key = Object.keys(resp_f.person)\r",
							"let person_object = Object.values(resp_f.person)\r",
							"for (i=0; i < 3; i++) {\r",
							"    console.log(person_key[i], person_object[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_2",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}